# Program to calculate Ackermann function

class Acker:
    # count hits to this class
    hitcount = 0

    # Memoization
    cache = {}

    # Number of times cache is used
    cache_hit = 0

    # Number of times cache hits failed
    cache_miss = 0

    # Input x: First argument
    # Input y: Second argument
    # Conditions: x>=0 and y>=0
    def a0(self, m, n):
        self.hitcount = self.hitcount + 1
        if m == 0:
            return n + 1
        elif n == 0:
            return self.a0(m - 1, 1)
        else:
            return self.a0(m - 1, self.a0(m, n - 1))

    # Input x: First argument
    # Input y: Second argument
    # Conditions: x>=0 and y>=0
    def a1(self, m, n):
        self.hitcount = self.hitcount + 1
        if self.cache.has_key(m) and self.cache[m].has_key(n):
            self.cache_hit = self.cache_hit + 1
            return self.cache[m][n]
        else:
            self.cache_miss = self.cache_miss + 1
            if m == 0:
                result = n + 1
            elif n == 0:
                result = self.a1(m - 1, 1)
            else:
                result = self.a1(m - 1, self.a1(m, n - 1))
            if self.cache.has_key(m) == False:
                self.cache[m] = {}
            self.cache[m][n] = result
        return result

    # Input x: First argument
    # Input y: Second argument
    # Conditions: x>=0 and y>=0
    def a2(self, m, n):
        self.hitcount = self.hitcount + 1
        if m == 0:
            return n + 1
        elif m == 1:
            return n + 2
        elif n == 0:
            return self.a2(m - 1, 1)
        else:
            return self.a2(m - 1, self.a2(m, n - 1))

    # Input x: First argument
    # Input y: Second argument
    # Conditions: x>=0 and y>=0
    def a3(self, m, n):
        self.hitcount = self.hitcount + 1
        if self.cache.has_key(m) and self.cache[m].has_key(n):
            self.cache_hit = self.cache_hit + 1
            return self.cache[m][n]
        else:
            self.cache_miss = self.cache_miss + 1
            if m == 0:
                result = n + 1
            if m == 1:
                result = n + 2
            elif n == 0:
                result = self.a3(m - 1, 1)
            else:
                result = self.a3(m - 1, self.a3(m, n - 1))
            if self.cache.has_key(m) == False:
                self.cache[m] = {}
            self.cache[m][n] = result
        return result

    def run(self, m, n):
        return self.a3(m, n)


def print_usage():
    print "USAGE: python %s %s %s\nwhere,\n\tm - first integer parameter to acke\
rmann's function\n\tn - second integer parameter to ackermann's function.\nExamp\
le: python %s 2 3" % (sys.argv[0], 'm', 'n', sys.argv[0])

def print_validate():
    print " ERROR: You might have entered a negative or floating value number. \
Please Enter Positive integers only."
# Main routine
if __name__ == "__main__":
    from datetime import datetime
    import sys

    if len(sys.argv) != 3:
        print_usage()
        exit()
    if( (sys.argv[1]) < 0 or (sys.argv[1]).isdigit() != True or (sys.argv[2]) < 0 or (sys.argv[2]).isdigit() != True ):
        print_validate()
        exit()
    m = (int)(sys.argv[1])
    n = (int)(sys.argv[2])
    sys.setrecursionlimit(50000)
    start_time = datetime.now()
    acker = Acker()
    print 'Result of Ackermann function for given inputs: %d, %d is "%d"' % (m, n, acker.run(m, n))
    end_time = datetime.now()
    time_diff = end_time - start_time
    print 'Time to execute: %s' % time_diff
    print 'Total Calls to function: %d' % acker.hitcount
    if acker.cache != {}:
        print 'Cache Hit count: %d' % acker.cache_hit
        print 'Cache Miss count: %d' % acker.cache_miss
        print 'Cache Hit ratio: %.2f' % ((float)(acker.cache_hit) / acker.cache_miss * 100)
